#include <bits/stdc++.h>
using namespace std;

typedef struct node {
    int data;
    node * next;
} List;

List * Create (int value) {
    List *p = new List;
    p -> data = value;
    p -> next = NULL;
    return p;
}

void addLast (List *& f,int data) {
    List *p = Create (data);
    if (f == NULL) f = p;
    else {
        List *h = f;
        while (h -> next != NULL) h = h -> next; 
        h -> next = p;
    }
}

void rvs (List *& f) {
    List * c = f, *p = NULL, * n = NULL;
    while (c != NULL) {
        n = c -> next;
        c -> next = p;
        p = c;
        c = n;
    }
    f = p;
}

int Count (List * f) {
    int d = 0;
    while (f != NULL) {
        d++;
        f = f -> next;
    }
    return d;
}

void kt (List * f, List * p) {
    int d = 0, h = 0;
    for (List * i = f; i -> next != NULL; i = i -> next) {
        int kt = 0;
            for (List * j = i -> next; j != NULL; j = j -> next)
                if (i -> data > j -> data)  kt = 1;
        if (kt == 1) break;
        d++;
    }
    for (List * i = p; i -> next != NULL; i = i -> next) {
        int kt = 0;
            for (List * j = i -> next; j != NULL; j = j -> next)
                if (i -> data < j -> data) kt = 1;
        if (kt == 1) break;
        h++;
    }
    if (d < Count(f) - 1 && h < Count(p) - 1) cout << d << " " << Count(p) - h - 1;
    else cout << -1;
}

int main() {
    List * f = NULL;
    List * p = NULL;
    int n;
    cin >> n;
    int x;
    for (int i = 0; i < n ; i++) {
        cin >> x;
        addLast(f,x);
        addLast(p,x);
    }
    rvs(p);
    kt(f,p);
}
