#include<bits/stdc++.h>
using namespace std;
struct Node {
	int data;
	Node* next;
};
typedef struct Node* node;
node makeNode(int x) {
	node tmp = new Node();
	tmp->data = x;
	tmp->next = NULL;
	return tmp;
}
void insertLast(node &a, int x) {
	node tmp = makeNode(x);
	if(a == NULL) {
		a = tmp;
		return;
	} else {
		node p = a;
		while(p->next != NULL) {
			p = p->next;
		}
		p->next = tmp;
	}
}
void output(node a) {
	node p = a;
	while(p != NULL) {
		cout << p->data << " ";
		p = p->next;
	}
}
void min_distinct(node a, int x, int y, int &min) {
	node truoc = a;
	while(truoc->next != NULL) {
		int count = 0;
		if(truoc->data == x) {
			node sau = truoc;
			while(sau != NULL) {
				if(sau->data == y) {
					break;
				} else {
					count++;
					sau = sau->next;
				}
			}
		}
		if((min > count || min == -1) && count != 0) {
			min = count;
		} else {
			truoc = truoc->next;
		}
	}
}
int check(node a, int x, int y) {
	int countx = 0, county = 0;
	for(node i = a; i != NULL; i = i->next) {
		if(i->data == x) {
			countx++;
		} else if(i->data == y) {
			county++;
		}
	}
	if(countx != 0 && county != 0) {
		return 1;
	} else {
		return 0;
	}
}
int main() {
	node list = NULL;
	int N, x, y;
	cin >> N >> x >> y;
	int a;
	for(int i = 0; i < N; i++) {
		cin >> a;
		insertLast(list, a);
	}
	if(check(list, x, y)) {
		int min = -1;
		min_distinct(list, x, y, min);
		min_distinct(list, y, x, min);
		cout << min;
	} else {
		cout << "-1";
	}
	return 0;
}
